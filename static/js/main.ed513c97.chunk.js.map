{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","username","topic","className","src","alt","CardList","robots","map","user","index","key","Scroll","props","style","overflowY","border","height","children","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","console","log","store","fetch","then","response","json","users","t","length","topics","rand","Math","floor","random","condition","searchField","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","isPending","requestRobots","dispatch","event","payload","target","value","onRequestRobots","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ed513c97.chunk.js","sourcesContent":["import React from 'react';\nimport 'tachyons';\nconst Card = ({id, name,email,username,topic}) =>{\n    return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n        <header className='f5 b'>{topic}</header>\n        <img src={`https://robohash.org/${username}?set=set1?200x200`} alt=''/>\n        <div>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    </div>\n    );\n\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) =>{\n    /*if(true){\n        throw new Error('Noooo!')\n    }*/\n   \n    return (    \n        robots.map((user, index)=>{        \n            return  (\n            <Card \n            key={index} \n            id={user.id} \n            name={user.name} \n            username={user.username} \n            email={user.email} \n            topic={user.topic} \n            \n            />)\n    \n        })      \n    );\n}\n\nexport default CardList;","import React from 'react';\n\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px dotted black', height:'700px'}}>\n                {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange}) => {\nreturn (\n    <div className='pa2'>\n        <input \n        className='pa3 ba b--green bg-lightest-blue'\n        type='search' \n        placeholder='Search for Bot Concepts'\n        onChange={searchChange}/> \n    </div>\n);\n\n}\n\n\n\n\n\n\nexport default SearchBox;","import React, {Component} from 'react';\n\n\nclass ErrorBoundary extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error , info){\n        this.setState({hasError: true});\n    }\n\n    render(){       \n        const { hasError } = this.state;        \n        return (hasError)? <h1>Oops ... That is not good</h1>:this.props.children;           \n    }\n    \n}\n\nexport default ErrorBoundary;","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps =  state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        isPending: state.requestRobots.isPending,\n        robots: state.requestRobots.robots,\n        error: state.requestRobots.error\n    }\n}\nconst mapDispatchToProps  = (dispatch) => {\n    return {\n         onSearchChange: (event) => dispatch(setSearchField(event.target.value))  ,\n         onRequestRobots: () => dispatch(requestRobots())\n    }  \n}\n \n\nclass App extends Component{\n\n    constructor(){\n        super();\n        this.state = {            \n                robots:[],\n                //searchfield: ''            \n        }     \n    }\n    componentDidMount(){   \n        console.log(this.props.store);  \n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => {          \n               return response.json()\n            }).then(users => {               \n                for(var t=0; t < users.length;t++){                  \n                    var topics = ['RETARGETING & PROSPECTING','FORGET LEADS, BUILD NETWORKS','BUILD AN ECO-SYSTEM FOR US.','OMNICHANNEL ENGAGEMENT','24SEVEN – WE’RE WITH YOU ALWAYS'];\n                    let rand = topics[Math.floor(Math.random() * topics.length)];\n                    if(typeof users[t-1] !== 'undefined' && users[t-1].topic === rand){\n                        let condition = true;\n                        while (condition) {\n                            rand = topics[Math.floor(Math.random() * topics.length)];\n                            if(users[t-1].topic !== rand){\n                                condition = false;\n                            }\n                        }\n                    }                    \n                    users[t].topic=rand;         \n                }\n                this.setState({robots: users});     \n            });\n    }\n\n    \n    render(){\n        const { robots } = this.state;\n        const {searchField, onSearchChange } = this.props;\n        const filteredRobots  = this.state.robots.filter(robot =>{\n            return robot.topic.toLowerCase().includes(searchField.toLowerCase());\n        });\n        return (!robots.length)? <h1>Loading...</h1>:        \n           ( \n           <div className='tc'>\n               <h1 className='f1'>BOT Concepts</h1>\n               <SearchBox searchChange={onSearchChange}/>\n               <Scroll>\n                 <ErrorBoundary>\n                     <CardList robots={filteredRobots}/>\n                  </ErrorBoundary>\n               </Scroll>\n            </div>\n            );\n    }\n    \n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOT_PENDING,\n    REQUEST_ROBOT_SUCCESS,\n    REQUEST_ROBOT_FAILED\n} from './constants';\n\n\nexport const setSearchField = (text) => { \n    return ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n}\n\nexport const requestRobots = () =>  (dispatch) =>{\n    dispatch({'type':REQUEST_ROBOT_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({'type': REQUEST_ROBOT_SUCCESS, \n    'payload': data\n    \n}))\n    .catch(error => dispatch({'type': REQUEST_ROBOT_FAILED,'payload': error}))\n}\n\nconst addTopic = (users_data) =>{\n    for(var t=0; t < users_data.length;t++){                  \n        var topics = ['RETARGETING & PROSPECTING','FORGET LEADS, BUILD NETWORKS','BUILD AN ECO-SYSTEM FOR US.','OMNICHANNEL ENGAGEMENT','24SEVEN – WE’RE WITH YOU ALWAYS'];\n        let rand = topics[Math.floor(Math.random() * topics.length)];\n        if(typeof users_data[t-1] !== 'undefined' && users_data[t-1].topic === rand){\n            let condition = true;\n            while (condition) {\n                rand = topics[Math.floor(Math.random() * topics.length)];\n                if(users_data[t-1].topic !== rand){\n                    condition = false;\n                }\n            }\n        }                    \n        users_data[t].topic=rand;         \n    }\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\n\nexport const REQUEST_ROBOT_PENDING = 'REQUEST_ROBOT_PENDING';\nexport const REQUEST_ROBOT_SUCCESS = 'REQUEST_ROBOT_SUCCESS';\nexport const REQUEST_ROBOT_FAILED = 'REQUEST_ROBOT_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOT_PENDING,\n    REQUEST_ROBOT_SUCCESS,\n    REQUEST_ROBOT_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots:[],\n    error:''\n}\n\nexport const searchRobots = (state = initialStateSearch, action= {}) => {\n\n    switch(action.type){\n        case (CHANGE_SEARCH_FIELD):\n            return Object.assign({}, state, {searchField: action.payload});\n\n       default:\n           return state;\n    }\n\n}\n\nexport const requestRobots = (state = initialStateRobots, action= {}) => {\n\n    switch(action.type){\n        case (REQUEST_ROBOT_PENDING):\n            return Object.assign({}, state, {isPending: true});\n        case (REQUEST_ROBOT_SUCCESS):\n            for(var t=0; t < action.payload.length;t++){                  \n                var topics = ['FORGET LEADS, BUILD NETWORKS','BUILD AN ECO-SYSTEM FOR US.','OMNICHANNEL ENGAGEMENT','24SEVEN – WE’RE WITH YOU ALWAYS'];\n                var rand = topics[Math.floor(Math.random() * topics.length)];\n                action.payload[t].topic=rand;         \n            }\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\n        case (REQUEST_ROBOT_FAILED):\n            return Object.assign({}, state, {error: action.payload,isPending: false});\n                   \n            default:\n           return state;\n    }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore , applyMiddleware, combineReducers} from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots ,requestRobots} from  './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots ,requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n \nReactDOM.render(\n    <Provider store={store}>\n        <App  />\n    </Provider>\n\n        \n         \n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}